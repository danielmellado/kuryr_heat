heat_template_version: pike

description: Template to deploy openshift worker nodes

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for the kuryr nodes
  flavor:
    type: string
    label: Flavor
    description: Flavor to be used for the image
    default: m1.small
  key:
    type: string
    label: key name
    description: Keypair to be used for the instance
  index:
    type: number
  name:
    type: string
    label: Instance name
    description: Worker node instance name
  network:
    type: string
    label: VM Network
    description: Neutron network for VMs
  subnet:
    type: string
    label: VM Subnet
    description: Neutron subnet for VMs
  external_dns_server:
    type: string
    description: IP for the DNS server
  dns_domain:
    type: string
    description: search domain for the node
  pod_network:
    type: string
    label: Pods Network
    description: Neutron network for Pods
  pod_subnet:
    type: string
    label: Pod Subnet
    description: Neutron subnet for Pods
  subports_per_pool:
    type: number
    label: Precreated subports
    description: nymber of pre-created subports per pool

resources:
  parent_port:
    type: OS::Neutron::Port
    properties:
      name: { get_param: name }
      network: { get_param: network }
      security_groups:
        - default
      fixed_ips:
        - subnet: { get_param: subnet }

  subports:
    type: OS::Kuryr::Subports
    properties:
      network: { get_param: pod_network }
      subnet: { get_param: pod_subnet}
      number_of_subports: { get_param: subports_per_pool }

  segmentation:
    type: OS::Kuryr::SegIds
    properties:
      number_of_vlan_ids: { get_param: subports_per_pool }

  trunk_port:
    type: OS::Neutron::Trunk
    properties:
      name: { get_param: name }
      port: { get_resource: parent_port }
      sub_ports:
        repeat:
          for_each:
            <%port%>: { get_attr: [subports, subport_id] }
            <%vlan_id%>: { get_attr: [segmentation, vlan_ids] }
          template:
            port: <%port%>
            segmentation_type: vlan
            segmentation_id: <%vlan_id%>
          permutations: false

  instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      name:
        str_replace:
          template: "__stack__/__name__"
          params:
            __stack__: { get_param: 'OS::stack_name' }
            __name__: { get_param: name }
      networks:
          - port: { get_attr: [trunk_port, port_id] }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __dns_domain__: { get_param: dns_domain }
            __external_dns_server__: { get_param: external_dns_server }
            __name__: { get_param: name }
          template: |
            #!/bin/bash
            # Wait a bit for connectivity
            sleep 10

            if [[ "__external_dns_server__" != "" ]]; then
                echo "Setting up cluster DNS"
                cat > /etc/resolv.conf << EOF
            search __dns_domain__
            nameserver __external_dns_server__
            EOF
            else
                sed -i -e 's/search.*/search __dns_domain__/' /etc/resolv.conf
            fi

            hostnamectl set-hostname "__name__.__dns_domain__"
            yum install -y NetworkManager
            systemctl enable NetworkManager
            systemctl start NetworkManager

outputs:
  trunk_port_id:
    value: { get_resource: parent_port }
  trunk_port_ips:
    value: { get_attr: [parent_port, fixed_ips] }
  trunk_port_dns:
    value:
      str_replace:
        template: "{\"fqdn\": \"__name__.__domain__\", \"fixed_ips\": __ips__}"
        params:
          __name__: { get_param: name }
          __domain__: { get_param: dns_domain }
          __ips__:
            list_join:
            - ','
            - { get_attr: [parent_port, fixed_ips] }
