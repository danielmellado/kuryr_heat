heat_template_version: pike

description: Template to deploy openshift master nodes

parameters:
  public_net:
    type: string
    label: public net ID
    description: Public network for the node FIPs
  image:
    type: string
    label: Image name or ID
    description: Image to be used for the kuryr nodes
  flavor:
    type: string
    label: Flavor
    description: Flavor to be used for the image
    default: m1.small
  key:
    type: string
    label: key name
    description: Keypair to be used for the instance
  private_key:
    type: string
    label: key content to access other nodes
    description: private key to configure all nodes
  vm_net:
    type: string
    label: VM Network
    description: Neutron network for VMs
  vm_subnet:
    type: string
    label: VM Subnet
    description: Neutron subnet for VMs
  k8s_lb_pool:
    type: string
    label: K8s Pool
    description: K8s LoadBalancer Pool
  k8s_api_sg:
    type: string
    label: kubernetes API sg
    description: Security Group for Kubernetes API
  name:
    type: string
    label: Instance name
    description: Master node instance name
  external_dns_server:
    type: string
    description: IP for the DNS server
  dns_domain:
    type: string
    description: search domain for the node

resources:
  instance_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: vm_net }
      security_groups:
        - default
        - { get_param: k8s_api_sg }
      fixed_ips:
        - subnet: { get_param: vm_subnet }

  instance_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: instance_port }

  instance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "__stack__/__name__"
          params:
            __stack__: { get_param: 'OS::stack_name' }
            __name__: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: instance_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __privkey__: { get_param: private_key }
            __dns_domain__: { get_param: dns_domain }
            __external_dns_server__: { get_param: external_dns_server }
            __name__: { get_param: name }
          template: |
            #!/bin/bash
            set -ex

            # Deps for openshift-ansible
            mkdir -p /home/centos/.ssh
            cat > /home/centos/.ssh/id_rsa <<EOF
            __privkey__
            EOF
            chown centos:centos /home/centos/.ssh/id_rsa
            chmod 0600 /home/centos/.ssh/id_rsa

            sleep 10

            if [[ "__external_dns_server__" != "" ]]; then
                echo "Setting up cluster DNS"
                cat > /etc/resolv.conf << EOF
            search __dns_domain__
            nameserver __external_dns_server__
            EOF
            else
                sed -i -e 's/search.*/search __dns_domain__/' /etc/resolv.conf
            fi

            hostnamectl set-hostname "__name__.__dns_domain__"

            # Prepare OpenShift ansible deployment
            yum install -y epel-release
            yum install -y ansible git
            git clone https://github.com/openshift/openshift-ansible /home/centos/openshift-ansible
            pushd /home/centos/openshift-ansible
            popd
            chown centos:centos -R /home/centos/openshift-ansible

  lb_member:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_param: k8s_lb_pool }
      protocol_port: 8443
      address: { get_attr: [instance, first_address]}
      subnet: { get_param: vm_subnet }

outputs:
  instance_fip:
    description: FIP address of the worker node
    value: { get_attr: [instance_fip, floating_ip_address] }
  port_dns:
    value:
      str_replace:
        template: "{\"fqdn\": \"__name__.__domain__\", \"fixed_ips\": __ips__}"
        params:
          __name__: { get_param: name }
          __domain__: { get_param: dns_domain }
          __ips__:
            list_join:
            - ','
            - { get_attr: [instance_port, fixed_ips] }
