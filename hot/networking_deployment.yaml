heat_template_version: 2014-10-16

description: Simple template to deploy kuryr resources

parameters:
  public_net:
    type: string
    label: public net ID
    description: Public network for the node FIPs
  vm_net_cidr:
    type: string
    description: vm_net network address (CIDR notation)
  vm_net_gateway:
    type: string
    description: vm_net network gateway address
  pod_net_cidr:
    type: string
    description: pod_net network address (CIDR notation)
  pod_net_gateway:
    type: string
    description: pod_net network gateway address
  service_net_cidr:
    type: string
    description: service_net network address (CIDR notation)
  service_net_gateway:
    type: string
    description: service_net network gateway address
  service_router_port_ip:
    type: string
    description: IP for service router port
    default: 172.30.255.254
  service_lbaas_ip:
    type: string
    description: IP for the kubernetes loadbalancer
    default: 172.30.0.1

resources:
  vm_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: "__stack__/vm_net"
          params:
            __stack__: { get_param: 'OS::stack_name' }

  vm_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: vm_net }
      cidr: { get_param: vm_net_cidr }
      gateway_ip: { get_param: vm_net_gateway }
      name:
        str_replace:
          template: "__stack__/vm_subnet"
          params:
            __stack__: { get_param: 'OS::stack_name' }

  pod_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: "__stack__/pod_net"
          params:
            __stack__: { get_param: 'OS::stack_name' }

  pod_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: pod_net }
      cidr: { get_param: pod_net_cidr }
      gateway_ip: { get_param: pod_net_gateway }
      enable_dhcp: False
      name:
        str_replace:
          template: "__stack__/pod_subnet"
          params:
            __stack__: { get_param: 'OS::stack_name' }

  service_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: "__stack__/service_net"
          params:
            __stack__: { get_param: 'OS::stack_name' }

  service_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: service_net }
      cidr: { get_param: service_net_cidr }
      gateway_ip: { get_param: service_net_gateway }
      enable_dhcp: False
      name:
        str_replace:
          template: "__stack__/service_subnet"
          params:
            __stack__: { get_param: 'OS::stack_name' }

  k8s_lb:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      name:
        str_replace:
          template: "__stack__/openshift-lb"
          params:
            __stack__: { get_param: 'OS::stack_name' }
      vip_address: { get_param: service_lbaas_ip }
      vip_subnet: { get_resource: service_subnet }

  k8s_lb_listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      name:
        str_replace:
          template: "__stack__/openshift-tcp-443"
          params:
            __stack__: { get_param: 'OS::stack_name' }
      loadbalancer: { get_resource: k8s_lb }
      protocol: HTTPS
      protocol_port: 443

  k8s_lb_pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      name:
        str_replace:
          template: "__stack__/openshift-https"
          params:
            __stack__: { get_param: 'OS::stack_name' }
      protocol: HTTPS
      lb_algorithm: ROUND_ROBIN
      listener: { get_resource: k8s_lb_listener }

  kuryr_router:
    type: OS::Neutron::Router
    properties:
      name:
        str_replace:
          template: "__stack__/router"
          params:
            __stack__: { get_param: 'OS::stack_name' }
      external_gateway_info:
        network: { get_param: public_net }

  kr_vm_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: kuryr_router }
      subnet_id: { get_resource: vm_subnet }

  kr_pod_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: kuryr_router }
      subnet_id: { get_resource: pod_subnet }

  service_router_port:
      type: OS::Neutron::Port
      properties:
        network: { get_resource: service_net}
        fixed_ips:
          - subnet: { get_resource: service_subnet }
            ip_address: { get_param: service_router_port_ip }
        name:
          str_replace:
            template: "__stack__/service-router-port"
            params:
              __stack__: { get_param: 'OS::stack_name' }

  kr_service_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: kuryr_router }
      port: { get_resource: service_router_port }

  k8s_api_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: "__stack__/openshift-api"
          params:
            __stack__: { get_param: 'OS::stack_name' }
      description: Ping and SSH
      rules:
      - protocol: icmp
      - ethertype: IPv4
        remote_ip_prefix: { get_param: pod_net_cidr }
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 8443
        port_range_max: 8443

  pod_access_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: "__stack__/pod_access"
          params:
            __stack__: { get_param: 'OS::stack_name' }
      description: Give Services access to the pods
      rules:
      - ethertype: IPv4
        remote_ip_prefix: { get_param: service_net_cidr }
      - ethertype: IPv4
        remote_ip_prefix: { get_param: vm_net_cidr }

outputs:
  vm_net_id:
    value: { get_resource: vm_net }
  vm_subnet_id:
    value: { get_resource: vm_subnet }
  pod_subnet_id:
    value: { get_resource: pod_subnet }
  service_subnet_id:
    value: { get_resource: service_subnet }
  k8s_lb_pool_id:
    value: { get_resource: k8s_lb_pool }
  k8s_api_sg_id:
    value: { get_resource: k8s_api_sg }
  pod_access_sg_id:
    value: { get_resource: pod_access_sg }
